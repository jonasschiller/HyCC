#line 2 "jsil_lex.yy.cpp"

#line 4 "jsil_lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer yyjsil_create_buffer
#define yy_delete_buffer yyjsil_delete_buffer
#define yy_scan_buffer yyjsil_scan_buffer
#define yy_scan_string yyjsil_scan_string
#define yy_scan_bytes yyjsil_scan_bytes
#define yy_init_buffer yyjsil_init_buffer
#define yy_flush_buffer yyjsil_flush_buffer
#define yy_load_buffer_state yyjsil_load_buffer_state
#define yy_switch_to_buffer yyjsil_switch_to_buffer
#define yypush_buffer_state yyjsilpush_buffer_state
#define yypop_buffer_state yyjsilpop_buffer_state
#define yyensure_buffer_stack yyjsilensure_buffer_stack
#define yy_flex_debug yyjsil_flex_debug
#define yyin yyjsilin
#define yyleng yyjsilleng
#define yylex yyjsillex
#define yylineno yyjsillineno
#define yyout yyjsilout
#define yyrestart yyjsilrestart
#define yytext yyjsiltext
#define yywrap yyjsilwrap
#define yyalloc yyjsilalloc
#define yyrealloc yyjsilrealloc
#define yyfree yyjsilfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define yyjsil_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer yyjsil_create_buffer
#endif

#ifdef yy_delete_buffer
#define yyjsil_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer yyjsil_delete_buffer
#endif

#ifdef yy_scan_buffer
#define yyjsil_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer yyjsil_scan_buffer
#endif

#ifdef yy_scan_string
#define yyjsil_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string yyjsil_scan_string
#endif

#ifdef yy_scan_bytes
#define yyjsil_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes yyjsil_scan_bytes
#endif

#ifdef yy_init_buffer
#define yyjsil_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer yyjsil_init_buffer
#endif

#ifdef yy_flush_buffer
#define yyjsil_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer yyjsil_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define yyjsil_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state yyjsil_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define yyjsil_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer yyjsil_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define yyjsilpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state yyjsilpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define yyjsilpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state yyjsilpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define yyjsilensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack yyjsilensure_buffer_stack
#endif

#ifdef yylex
#define yyjsillex_ALREADY_DEFINED
#else
#define yylex yyjsillex
#endif

#ifdef yyrestart
#define yyjsilrestart_ALREADY_DEFINED
#else
#define yyrestart yyjsilrestart
#endif

#ifdef yylex_init
#define yyjsillex_init_ALREADY_DEFINED
#else
#define yylex_init yyjsillex_init
#endif

#ifdef yylex_init_extra
#define yyjsillex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra yyjsillex_init_extra
#endif

#ifdef yylex_destroy
#define yyjsillex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy yyjsillex_destroy
#endif

#ifdef yyget_debug
#define yyjsilget_debug_ALREADY_DEFINED
#else
#define yyget_debug yyjsilget_debug
#endif

#ifdef yyset_debug
#define yyjsilset_debug_ALREADY_DEFINED
#else
#define yyset_debug yyjsilset_debug
#endif

#ifdef yyget_extra
#define yyjsilget_extra_ALREADY_DEFINED
#else
#define yyget_extra yyjsilget_extra
#endif

#ifdef yyset_extra
#define yyjsilset_extra_ALREADY_DEFINED
#else
#define yyset_extra yyjsilset_extra
#endif

#ifdef yyget_in
#define yyjsilget_in_ALREADY_DEFINED
#else
#define yyget_in yyjsilget_in
#endif

#ifdef yyset_in
#define yyjsilset_in_ALREADY_DEFINED
#else
#define yyset_in yyjsilset_in
#endif

#ifdef yyget_out
#define yyjsilget_out_ALREADY_DEFINED
#else
#define yyget_out yyjsilget_out
#endif

#ifdef yyset_out
#define yyjsilset_out_ALREADY_DEFINED
#else
#define yyset_out yyjsilset_out
#endif

#ifdef yyget_leng
#define yyjsilget_leng_ALREADY_DEFINED
#else
#define yyget_leng yyjsilget_leng
#endif

#ifdef yyget_text
#define yyjsilget_text_ALREADY_DEFINED
#else
#define yyget_text yyjsilget_text
#endif

#ifdef yyget_lineno
#define yyjsilget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno yyjsilget_lineno
#endif

#ifdef yyset_lineno
#define yyjsilset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno yyjsilset_lineno
#endif

#ifdef yywrap
#define yyjsilwrap_ALREADY_DEFINED
#else
#define yywrap yyjsilwrap
#endif

#ifdef yyalloc
#define yyjsilalloc_ALREADY_DEFINED
#else
#define yyalloc yyjsilalloc
#endif

#ifdef yyrealloc
#define yyjsilrealloc_ALREADY_DEFINED
#else
#define yyrealloc yyjsilrealloc
#endif

#ifdef yyfree
#define yyjsilfree_ALREADY_DEFINED
#else
#define yyfree yyjsilfree
#endif

#ifdef yytext
#define yyjsiltext_ALREADY_DEFINED
#else
#define yytext yyjsiltext
#endif

#ifdef yyleng
#define yyjsilleng_ALREADY_DEFINED
#else
#define yyleng yyjsilleng
#endif

#ifdef yyin
#define yyjsilin_ALREADY_DEFINED
#else
#define yyin yyjsilin
#endif

#ifdef yyout
#define yyjsilout_ALREADY_DEFINED
#else
#define yyout yyjsilout
#endif

#ifdef yy_flex_debug
#define yyjsil_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug yyjsil_flex_debug
#endif

#ifdef yylineno
#define yyjsillineno_ALREADY_DEFINED
#else
#define yylineno yyjsillineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 183
#define YY_END_OF_BUFFER 184
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1305] =
    {   0,
        0,    0,    0,    0,    5,    5,    0,    0,   10,   10,
        0,    0,  184,    1,   84,   77,   76,   76,   84,   84,
       82,   84,   82,   82,   82,   83,    5,    7,    6,    6,
       17,   15,   17,   17,   17,   17,   10,   12,   11,   11,
      182,   86,   85,   85,  182,  182,  182,  182,  138,  182,
      182,  182,  137,  182,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  181,
       77,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        2,   82,   76,   82,   82,   82,   80,    5,    3,    4,

       15,    0,   14,    0,   16,   17,   10,    8,    9,   86,
        0,   13,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  138,
      138,  138,    0,  128,  132,  133,  129,  134,  137,   85,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  131,  137,  137,  137,  137,  137,  137,  137,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   82,   82,   82,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  139,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  138,    0,    0,
      138,  135,  130,  137,  137,  137,  137,  137,  137,  137,
      137,   92,  136,  137,  137,  137,   97,  137,  137,  137,
      137,  137,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   82,   82,   82,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  107,
      179,    0,    0,  166,  150,    0,    0,  147,    0,    0,

        0,    0,  170,    0,    0,  142,    0,    0,    0,  175,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  138,
        0,  138,   99,  137,   87,  137,  137,   89,  137,  137,
      101,  137,  137,   90,  137,  104,  137,   91,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   82,   82,
       82,    0,    0,    0,  119,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  152,

        0,  156,    0,    0,    0,  154,    0,    0,    0,    0,
        0,    0,    0,  137,  105,   98,  137,   88,  137,  137,
      137,  137,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   82,   82,   81,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  112,    0,  103,    0,    0,
        0,    0,    0,  148,    0,    0,  180,  173,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  106,  108,    0,    0,   94,  137,

      137,  137,  137,  137,  100,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   82,
       79,    0,    0,    0,  123,  126,    0,  122,    0,    0,
        0,    0,  178,    0,    0,    0,  149,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  137,
      137,  137,  137,  137,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   54,    0,   57,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   82,  121,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  169,  163,    0,    0,
        0,    0,  151,  155,    0,    0,  174,  153,    0,    0,
        0,    0,   93,  137,  137,  137,  137,   96,  137,    0,
        0,   52,    0,   53,    0,    0,   65,   70,    0,   68,
       67,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   78,    0,    0,    0,

        0,    0,    0,    0,  165,    0,    0,    0,    0,    0,
      140,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  137,  137,  137,  137,  137,    0,
        0,    0,    0,   64,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  127,  120,
        0,    0,    0,    0,    0,    0,  146,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  161,  110,    0,
      102,  137,  137,  137,   95,  137,    0,    0,   72,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   48,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  125,    0,    0,    0,
        0,  157,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  162,    0,  137,  137,  137,  137,    0,    0,
        0,    0,   63,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   30,    0,    0,   24,    0,    0,    0,    0,    0,
        0,   34,    0,    0,    0,    0,    0,    0,    0,  109,

        0,  168,  158,  141,    0,  172,    0,    0,    0,  144,
      159,    0,  177,    0,  115,  137,  137,  137,    0,    0,
        0,   66,   69,    0,    0,    0,    0,    0,    0,    0,
       20,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  167,  171,    0,    0,  143,
      160,  176,    0,  113,  116,  114,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       45,    0,    0,    0,   18,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  124,    0,    0,

        0,    0,    0,    0,    0,   74,    0,    0,   55,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  111,    0,    0,    0,
        0,    0,   56,    0,   58,   49,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  117,    0,    0,    0,   73,
        0,    0,   59,    0,    0,    0,    0,    0,    0,    0,
        0,   19,   31,    0,   25,    0,    0,    0,    0,    0,
       35,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   21,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  118,    0,  145,
        0,    0,    0,    0,    0,    0,    0,    0,   46,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       71,    0,    0,    0,   60,    0,    0,    0,    0,   38,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   40,   41,    0,    0,   39,    0,    0,   75,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   29,
        0,    0,    0,    0,    0,    0,   44,    0,    0,    0,
        0,   51,    0,    0,   42,   47,    0,    0,    0,    0,
        0,    0,    0,    0,  164,   62,    0,   50,    0,    0,
        0,   33,    0,    0,   27,   43,    0,   37,    0,    0,
       23,   32,    0,   26,   36,   61,   22,    0,    0,    0,

        0,    0,   28,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
        4,    4,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    7,    8,    1,    8,    9,   10,   11,   11,   12,
       13,   11,   11,   11,   11,   11,   11,   14,    1,   15,
       16,   17,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   27,   27,   28,   29,   30,   31,
       27,   32,   33,   34,   35,   36,   27,   27,   27,   27,
       37,   38,   39,    1,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   64,   66,    1,   67,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    1,    1,    3,    1,    4,    3,
        4,    4,    4,    1,    1,    1,    1,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1,    1,    1,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    1,    1
    } ;

static const flex_int16_t yy_base[1315] =
    {   0,
        0,    0,    0,    0,   65,   66,   75,   79,   83,   84,
      117,    0, 1488, 1489, 1489, 1485, 1489, 1489,  167, 1479,
        0, 1482, 1426, 1438,   23, 1489,    0, 1489, 1472, 1474,
     1489, 1478, 1489,   65, 1472, 1475,    0, 1489, 1467, 1469,
     1489, 1473, 1489, 1489,   69,  211,   84, 1467,  264, 1457,
       84, 1455,    0, 1468, 1416, 1428, 1423, 1405,   60, 1411,
     1424, 1423,   47, 1405, 1404, 1416,   54,   46, 1411, 1489,
     1457, 1416, 1409, 1411, 1396, 1393, 1393, 1397, 1414, 1392,
     1394,   48, 1387, 1395, 1385, 1403,   71,  143, 1399, 1385,
     1489,    0, 1489, 1387, 1381, 1382,    0,    0, 1489, 1489,

     1437,   77, 1489,    0, 1489, 1489,    0, 1489, 1489, 1436,
      181, 1489,    0,  134, 1392, 1375, 1393, 1389, 1373,  138,
     1391,  144,  149,  145,  269, 1373,  172,  175,  180,  238,
      267,  281,  287, 1489, 1489, 1489, 1489, 1413,    0, 1489,
     1385, 1369, 1375, 1385, 1373, 1379, 1363, 1363, 1379, 1357,
     1359,  171,    0, 1363, 1371, 1367, 1357, 1353, 1357, 1352,
     1352, 1365, 1349, 1388, 1347, 1348,  302,  260, 1347, 1349,
     1345, 1361, 1347, 1345, 1346, 1348, 1343, 1338, 1337, 1336,
     1335, 1343, 1348, 1329, 1334, 1333, 1338, 1333,  209, 1335,
     1338, 1325, 1338, 1336, 1322, 1338, 1324, 1321, 1332,  246,

      232,  278,  149, 1335, 1315, 1332,  203,  226,  256,  293,
     1327, 1313,  258, 1315, 1311, 1324,  331,  334,  346,  339,
      349, 1489,    0, 1322, 1321, 1313, 1305, 1311, 1307, 1338,
     1315,    0,    0, 1307, 1318, 1297,    0, 1300, 1306, 1309,
     1308, 1304, 1291, 1307, 1313, 1307, 1311, 1297, 1290, 1283,
     1301, 1284, 1281, 1291, 1294, 1293, 1296, 1275, 1294, 1282,
     1278, 1280, 1288, 1288, 1287, 1283, 1280, 1268, 1267, 1275,
     1265, 1277, 1276, 1262, 1256, 1266, 1265, 1274, 1263, 1272,
     1268, 1267, 1262, 1265, 1251, 1259, 1248, 1247, 1245, 1489,
     1489, 1246, 1248, 1262, 1489, 1243, 1259, 1489, 1245, 1249,

     1242, 1236, 1255, 1241, 1243, 1252, 1237,  250,  262, 1250,
     1231,  307, 1239, 1234, 1226, 1229, 1237, 1238,  355,  358,
      361,  364,    0, 1222,    0, 1236, 1236,    0, 1230, 1226,
        0, 1217, 1221,    0, 1221,    0, 1244,    0, 1215, 1221,
     1230, 1218, 1228, 1225, 1212, 1213, 1215, 1215, 1205, 1208,
     1215, 1200, 1200, 1198, 1192, 1211, 1197, 1209, 1193, 1211,
     1206, 1207, 1204, 1193, 1192, 1192, 1190, 1186, 1199, 1188,
     1182, 1195, 1179, 1193, 1489, 1192, 1193, 1177,  335, 1188,
     1203, 1191, 1172, 1170, 1164, 1187, 1175,  320, 1171, 1173,
     1181, 1164, 1168, 1173,  321, 1178, 1174,  335, 1171, 1489,

     1159, 1489, 1158,  325, 1166, 1489, 1156, 1168, 1150, 1156,
     1165, 1164, 1162, 1162,    0,    0, 1161,    0, 1150,  318,
     1157, 1157, 1161, 1171, 1148, 1147, 1146, 1137, 1144, 1153,
     1149, 1140, 1143, 1131,  276,  369, 1159, 1150, 1148, 1146,
     1146, 1127, 1135, 1131, 1124, 1121, 1135, 1121, 1120, 1130,
     1118, 1117, 1113, 1114,    0, 1131, 1122, 1112, 1111, 1108,
     1122, 1119, 1116, 1122, 1121, 1489, 1104, 1489, 1096, 1115,
     1104, 1117, 1099, 1111, 1095,  365, 1489, 1489, 1099, 1112,
     1107, 1108, 1091, 1094, 1107, 1102, 1091, 1090, 1089, 1102,
     1088, 1086, 1082, 1098, 1489, 1489, 1078, 1088,    0, 1084,

     1095, 1085, 1091, 1092,    0, 1088, 1088, 1068, 1087, 1066,
     1104, 1080, 1079, 1080, 1073, 1067, 1107, 1058, 1064, 1072,
     1055, 1052, 1075, 1055, 1073, 1068, 1056, 1066, 1050, 1052,
     1066, 1065, 1064, 1045, 1062, 1061, 1060, 1059, 1043, 1039,
        0, 1042, 1041, 1062, 1489, 1489, 1039, 1489, 1038, 1041,
     1038, 1028, 1489, 1047, 1054, 1034, 1489, 1027, 1035, 1034,
     1041, 1048, 1028, 1021, 1018, 1046, 1043, 1023, 1029, 1015,
     1014, 1038, 1018, 1022, 1010, 1009, 1014, 1019, 1010, 1019,
      337, 1017, 1011, 1000,  999, 1008, 1012, 1014, 1010,  997,
     1012,  994,  991,  990, 1002, 1036,  995, 1001,  999,  990,

      989, 1489,  987, 1489,  350, 1001,  999,  984,  984,  988,
      350,  357,  978,  992,  991,  358,  990,  974,  986, 1489,
     1000,  984,  985,  982,  981,  980,  981,  969,  962,  960,
      962,  964,  964,  963,  956,  954, 1489,  974,  955,  952,
      950,  952, 1489, 1489,  949,  947, 1489, 1489,  952,  945,
      944,  959,    0,  949,  942,  952,  948,    0,  944,  966,
      952, 1489,  944, 1489,  934,  938,  958, 1489,  939,  953,
     1489,  921,   58,  149,  175,  202,  180,  203,  220,  359,
      244,  247,  315,  305,  362,  349,  368,  365,  353,  357,
      375,  377,  378,  362,  380,  382,    0,  382,  379,  381,

      383,  385,  397,  370, 1489,  373,  387,  379,  381,  387,
     1489,  379,  393,  392,  385,  383,  397,  385,  386,  400,
      388,  402,  394,  405,  390,  393,  398,  409,  414,  410,
      413,  412,  417, 1489,  401,  398,  403,  426,  400,  403,
      405,  408,  422,  416,  410,  429,  413,  420,  433,  431,
      435,  424,  423,  423,  427,  426,  421,  427,  425,  433,
      434,  436,  435,  435,  439,  449,  443,  449, 1489, 1489,
      435,  451,  448,  449,  469,  442, 1489,  441,  453,  473,
      459,  445,  457,  477,  453,  460,  480,  455, 1489,  469,
     1489,  500,  465,  455,    0,  462,  465,  458, 1489,  467,

      471,  476,  473,  482,  470,  473,  477,  472,  470, 1489,
      469,  478,  477,  477,  493,  491,  494,  478,  491,  486,
      480,  480,  489,  483,  503,  484,  506,  495,  496,  498,
      492,  492,  501,  513,  510,  498, 1489,  511,  514,  505,
      514,  505,  517,  509,  518,  505,  511,  513,  522,  511,
      516,  525, 1489,  512,  561,  520,  562,  515,  536,  558,
      530,  527, 1489,  528,  530,  552,  524,  530,  530,  527,
      530,  537,  531,  531,  549,  552,  542,  541,  541,  548,
      557, 1489,  539,  545, 1489,  541,  546,  548,  561,  565,
      566, 1489,  547,  553,  569,  558,  568,  567,  568, 1489,

      567, 1489, 1489, 1489,  568, 1489,  576,  557,  571, 1489,
      563,  573, 1489,  572,    0,  575,  611,  571,  565,  571,
      567, 1489, 1489,  567,  571,  591,  577,  587,  568,  573,
     1489,  575,  581,  582,  586,  587,  581,  581,  588,  589,
      586,  585,  588,  589,  588,  608,  607,  608,  594,  593,
      611,  603,  596,  603,  600, 1489, 1489,  603,  595, 1489,
     1489, 1489,  606,    0,    0,    0,  613,  618,  599,  620,
      611,  628,  629,  611,  631,  628,  614,  613,  620,  623,
     1489,  616,  622,  629, 1489,  618,  615,  620,  627,  618,
      632,  630,  631,  626,  623,  634,  650, 1489,  648,  647,

      635,  638,  641,  641,  639,  665,  660,  644, 1489,  662,
      642,  664,  644,  644,  641,  648,  668,  651,  650,  651,
      669,  657,  671,  655,  660,  665,  664,  665,  677,  665,
      668,  680,  679,  671,  671,  682, 1489,  674,  686,  689,
      692,  687, 1489,  668, 1489, 1489,  691,  679,  676,  694,
      677,  679,  695,  681,  697,  683,  689,  700,  706,  688,
      689,  689,  705,  692,  697, 1489,  710,  694,  725, 1489,
      707,  704, 1489,  700,  738,  700,  716,  704,  708,  721,
      700, 1489, 1489,  726, 1489,  707,  728,  726,  710,  712,
     1489,  733,  714,  721,  731,  722,  732,  737,  735,  716,

      737,  723, 1489,  744,  724,  732,  727,  732,  729,  725,
      743,  738,  736,  737,  736,  739,  740, 1489,  740, 1489,
      749,  768,  786,  760,  750,  749,  767,  753, 1489,  768,
      759,  774,  760,  758,  763,  778,  766,  760,  761,  768,
      783,  765,  767,  763,  784,  765,  773,  787,  794,  793,
      786,  781,  796,  778,  779,  800,  801,  790,  798,  804,
      805,  794,  788,  805,  806,  810,  799,  809,  795,  798,
     1489,  799,  798,  811, 1489,  797,  805,  820,  809, 1489,
      804,  820,  805,  804,  826,  811,  809,  808,  810,  811,
      812,  814,  813,  815,  815,  832,  833,  838,  839,  829,

      835,  824,  823,  824,  845,  827,  843,  834,  832,  831,
      847,  835, 1489, 1489,  834,  850, 1489,  853,  857, 1489,
      833,  838,  840,  862,  842,  858,  861,  853,  848,  867,
      862,  854,  852,  871,  851,  855,  874,  855,  861,  878,
      866,  880,  881,  863,  882,  863,  872,  876,  871, 1489,
      867,  879,  874,  887,  882,  877, 1489,  887,  895,  875,
      897, 1489,  888,  883, 1489, 1489,  885,  894,  886,  888,
      897,  884,  891,  900, 1489, 1489,  908, 1489,  894,  903,
      903, 1489,  891,  905, 1489, 1489,  906, 1489,  915,  908,
     1489, 1489,  891, 1489, 1489, 1489, 1489,  901,  913,  919,

      905,  915, 1489, 1489,  961,  965,  969,  973,  974,  978,
      982,  986,  990,  976
    } ;

static const flex_int16_t yy_def[1315] =
    {   0,
     1305, 1305, 1304,    3, 1306, 1306, 1307, 1307, 1308, 1308,
     1304,   11, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1309, 1304, 1309, 1309, 1309, 1304, 1310, 1304, 1304, 1304,
     1304, 1304, 1304, 1311, 1304, 1304, 1312, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1313, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1314, 1304, 1314, 1314, 1314, 1314, 1314, 1314,
     1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1309, 1304, 1309, 1309, 1309, 1309, 1310, 1304, 1304,

     1304, 1311, 1304, 1311, 1304, 1304, 1312, 1304, 1304, 1304,
     1313, 1304, 1313, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1314, 1304,
     1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
     1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1309, 1309, 1309, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,

     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
     1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
     1314, 1314, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1309, 1309, 1309, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,

     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
     1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1309, 1309,
     1309, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,

     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
     1314, 1314, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1309, 1309, 1309, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1314, 1314,

     1314, 1314, 1314, 1314, 1314, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1309,
     1309, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1314,
     1314, 1314, 1314, 1314, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,

     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1309, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1309, 1304, 1304, 1304,

     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1314, 1314, 1314, 1314, 1314, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1314, 1314, 1314, 1314, 1314, 1304, 1304, 1304, 1304,

     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1314, 1314, 1314, 1314, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,

     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1314, 1314, 1314, 1314, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1314, 1314, 1314, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,

     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,

     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,

     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,

     1304, 1304, 1304,    0, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304
    } ;

static const flex_int16_t yy_nxt[1557] =
    {   0,
       15,   16,   17,   18,   15,   19,   15,   15,   15,   20,
       15,   15,   15,   15,   15,   15,   15,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   15,   22,   15,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   23,   21,   24,   21,   25,
       21,   21,   21,   21,   21,   26,   15,   28,   28,  103,
       96,   29,   29,  112,   30,   30,   32,   97,   33,   34,
       32,  103,   33,   34,   35,   38,   38,  739,   35,   39,
       39,  150,   40,   40,  130,  130,  130,  135,  136,  137,

      145,  151,  104,  158,  156,  171,  113,  152,  146,  172,
      159,  177,   36,  157,  104,  178,   36,   41,   42,   43,
       44,   45,   46,   41,   41,   47,   48,   49,   49,   49,
       50,   51,   41,   52,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   41,   54,   41,   53,   55,   56,   53,
       57,   58,   59,   60,   61,   53,   53,   53,   62,   53,
       63,   64,   65,   53,   66,   67,   68,   53,   53,   69,
       53,   53,   41,   70,   72,  112,   73,  179,  186,  740,
       74,  193,   75,  199,  187,  196,  194,   76,  197,   77,

       78,  198,  180,   79,  298,  173,  171,   80,   81,  299,
      172,   82,   83,   84,  214,  215,  179,  741,  113,  181,
       85,   86,  234,  235,   87,   88,   89,   90,   72,  114,
       73,  180,  742,  216,   74,  743,   75,  182,  115,  116,
      117,   76,  118,  119,   78,  120,  121,   79,  130,  130,
      130,   80,   81,  122,  744,  123,  124,   84,  303,  217,
      279,  280,  125,  304,   85,   86,  126,  305,   87,  127,
      128,  129,  131,  745,  132,  132,  132,  218,  218,  218,
      255,  306,  217,  256,  257,  133,  293,  294,  219,  131,
      258,  132,  132,  132,  220,  748,  307,  221,  221,  221,

      308,  291,  133,  292,  749,  400,  314,  401,  133,  200,
      201,  219,  315,  202,  203,  204,  518,  402,  205,  403,
      249,  206,  207,  208,  519,  133,  209,  210,  211,  212,
      250,  251,  252,  295,  253,  296,  254,  309,  319,  297,
      502,  320,  320,  320,  218,  218,  218,  503,  310,  221,
      221,  221,  311,  321,  750,  219,  322,  322,  322,  221,
      221,  221,  406,  751,  407,  320,  320,  320,  320,  320,
      320,  322,  322,  322,  322,  322,  322,  428,  219,  471,
      479,  472,  480,  483,  489,  654,  490,  560,  462,  520,
      678,  521,  685,  561,  484,  655,  485,  656,  522,  687,

      693,  746,  752,  688,  679,  686,  754,  523,  755,  757,
      758,  759,  689,  694,  747,  760,  753,  761,  762,  764,
      765,  766,  756,  767,  768,  769,  770,  771,  772,  773,
      774,  775,  763,  776,  777,  778,  779,  780,  781,  782,
      783,  784,  785,  786,  787,  788,  789,  790,  791,  792,
      793,  794,  795,  796,  797,  798,  799,  800,  801,  802,
      803,  804,  805,  806,  807,  808,  809,  810,  811,  812,
      814,  815,  816,  817,  819,  820,  821,  822,  823,  824,
      825,  826,  827,  813,  828,  829,  818,  830,  831,  832,
      833,  834,  835,  836,  837,  838,  839,  840,  841,  842,

      843,  844,  845,  846,  847,  848,  849,  850,  851,  852,
      853,  854,  855,  856,  857,  858,  859,  860,  861,  862,
      863,  864,  865,  866,  867,  868,  869,  870,  871,  872,
      873,  874,  875,  876,  877,  879,  880,  882,  883,  884,
      885,  886,  887,  888,  881,  889,  890,  891,  878,  892,
      893,  894,  895,  896,  897,  898,  899,  900,  901,  902,
      903,  904,  905,  906,  907,  908,  909,  910,  911,  912,
      913,  914,  915,  916,  917,  918,  919,  920,  921,  922,
      923,  924,  925,  926,  927,  928,  929,  930,  931,  932,
      933,  934,  935,  936,  937,  938,  939,  940,  941,  942,

      943,  944,  945,  946,  947,  948,  949,  950,  951,  952,
      953,  954,  955,  956,  957,  958,  959,  960,  961,  962,
      963,  964,  965,  966,  967,  968,  969,  970,  971,  972,
      973,  974,  975,  976,  977,  978,  979,  980,  981,  982,
      983,  984,  985,  986,  987,  988,  989,  990,  991,  992,
      993,  994,  995,  996,  997,  998,  999, 1000, 1001, 1002,
     1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
     1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
     1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
     1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,

     1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
     1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
     1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
     1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
     1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
     1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103,
     1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113,
     1102, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
     1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1133,
     1132, 1134, 1137, 1138, 1139, 1140, 1142, 1141, 1143, 1144,

     1145, 1146, 1135, 1147, 1136, 1150, 1148, 1151, 1152, 1154,
     1153, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163,
     1164, 1165, 1166, 1167, 1149, 1168, 1169, 1170, 1171, 1172,
     1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
     1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
     1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
     1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
     1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
     1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232,
     1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242,

     1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
     1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
     1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272,
     1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
     1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292,
     1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302,
     1303,   14,   14,   14,   14,   27,   27,   27,   27,   31,
       31,   31,   31,   37,   37,   37,   37,   92,   98,  139,
      738,   98,  102,  737,  102,  102,  107,  736,  735,  107,
      111,  734,  111,  111,  733,  732,  731,  730,  729,  728,

      727,  726,  725,  724,  723,  722,  721,  720,  719,  718,
      717,  716,  715,  714,  713,  712,  711,  710,  709,  708,
      707,  706,  705,  704,  703,  702,  701,  700,  699,  698,
      697,  696,  695,  692,  691,  690,  684,  683,  682,  681,
      680,  677,  676,  675,  674,  673,  672,  671,  670,  669,
      668,  667,  666,  665,  664,  663,  662,  661,  660,  659,
      658,  657,  653,  652,  651,  650,  649,  648,  647,  646,
      645,  644,  643,  642,  641,  640,  639,  638,  637,  636,
      635,  634,  633,  632,  631,  630,  629,  628,  627,  626,
      625,  624,  623,  622,  621,  620,  619,  618,  617,  616,

      615,  614,  613,  612,  611,  610,  609,  608,  607,  606,
      605,  604,  603,  602,  601,  600,  599,  598,  597,  596,
      595,  594,  593,  592,  591,  590,  589,  588,  587,  586,
      585,  584,  583,  582,  581,  580,  579,  578,  577,  576,
      575,  574,  573,  572,  571,  570,  569,  568,  567,  566,
      565,  564,  563,  562,  559,  558,  557,  556,  555,  554,
      553,  552,  551,  550,  549,  548,  547,  546,  545,  544,
      543,  542,  541,  540,  539,  538,  537,  536,  535,  534,
      533,  532,  531,  530,  529,  528,  527,  526,  525,  524,
      517,  516,  515,  514,  513,  512,  511,  510,  509,  508,

      507,  506,  505,  504,  501,  500,  499,  498,  497,  496,
      495,  494,  493,  492,  491,  488,  487,  486,  482,  481,
      478,  477,  476,  475,  474,  473,  470,  469,  468,  467,
      466,  465,  464,  463,  461,  460,  459,  458,  457,  456,
      455,  454,  453,  452,  451,  450,  449,  448,  447,  446,
      445,  444,  443,  442,  441,  440,  439,  438,  437,  436,
      435,  434,  433,  432,  431,  430,  429,  428,  427,  426,
      425,  424,  423,  422,  421,  420,  419,  418,  417,  416,
      415,  414,  413,  412,  411,  410,  409,  408,  405,  404,
      399,  398,  397,  396,  395,  394,  393,  392,  391,  390,

      389,  388,  387,  386,  385,  384,  383,  382,  381,  380,
      379,  378,  377,  376,  375,  374,  373,  372,  371,  370,
      369,  368,  367,  366,  365,  364,  363,  362,  361,  360,
      359,  358,  357,  356,  355,  354,  353,  352,  351,  350,
      349,  348,  347,  346,  345,  344,  343,  342,  341,  340,
      339,  338,  337,  336,  335,  334,  333,  332,  331,  330,
      329,  328,  327,  326,  325,  324,  323,  318,  317,  316,
      313,  312,  302,  301,  300,  290,  289,  288,  287,  286,
      285,  284,  283,  282,  281,  278,  277,  276,  275,  274,
      273,  272,  271,  270,  269,  268,  267,  266,  265,  264,

      263,  262,  261,  260,  259,  248,  247,  246,  245,  244,
      243,  242,  241,  240,  239,  238,  237,  236,  233,  232,
      231,  230,  229,  228,  227,  226,  225,  224,  223,  222,
      213,  195,  192,  191,  190,  189,  188,  110,  101,  185,
      184,  183,  182,  181,  176,  175,  174,  173,  170,  169,
      168,  167,  166,  165,  164,  163,  162,  161,   71,  160,
      155,  154,  153,  149,  148,  147,  144,  143,  142,  141,
      140,  138,  134,   91,  110,  109,  108,  106,  105,  101,
      100,   99,   95,   94,   93,   91,   71, 1304,   13, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,

     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304
    } ;

static const flex_int16_t yy_chk[1557] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    5,    6,   34,
       25,    5,    6,   45,    5,    6,    7,   25,    7,    7,
        8,  102,    8,    8,    7,    9,   10,  673,    8,    9,
       10,   63,    9,   10,   47,   47,   47,   51,   51,   51,

       59,   63,   34,   68,   67,   82,   45,   63,   59,   82,
       68,   87,    7,   67,  102,   87,    8,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   19,  111,   19,   88,  114,  674,
       19,  120,   19,  124,  114,  122,  120,   19,  122,   19,

       19,  123,   88,   19,  203,  124,  123,   19,   19,  203,
      123,   19,   19,   19,  127,  128,  127,  675,  111,  128,
       19,   19,  152,  152,   19,   19,   19,   19,   46,   46,
       46,  127,  676,  129,   46,  677,   46,  129,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,  130,  130,
      130,   46,   46,   46,  678,   46,   46,   46,  207,  130,
      189,  189,   46,  207,   46,   46,   46,  208,   46,   46,
       46,   46,   49,  679,   49,   49,   49,  131,  131,  131,
      168,  208,  130,  168,  168,   49,  201,  201,  131,  132,
      168,  132,  132,  132,  133,  681,  209,  133,  133,  133,

      209,  200,  132,  200,  682,  308,  213,  308,   49,  125,
      125,  131,  213,  125,  125,  125,  435,  309,  125,  309,
      167,  125,  125,  125,  435,  132,  125,  125,  125,  125,
      167,  167,  167,  202,  167,  202,  167,  210,  217,  202,
      420,  217,  217,  217,  218,  218,  218,  420,  210,  220,
      220,  220,  210,  219,  683,  218,  219,  219,  219,  221,
      221,  221,  312,  684,  312,  319,  319,  319,  320,  320,
      320,  321,  321,  321,  322,  322,  322,  379,  218,  388,
      395,  388,  395,  398,  404,  581,  404,  476,  379,  436,
      605,  436,  611,  476,  398,  581,  398,  581,  436,  612,

      616,  680,  685,  612,  605,  611,  686,  436,  687,  688,
      689,  690,  612,  616,  680,  691,  685,  692,  693,  694,
      695,  696,  687,  698,  699,  700,  701,  702,  703,  704,
      706,  707,  693,  708,  709,  710,  712,  713,  714,  715,
      716,  717,  718,  719,  720,  721,  722,  723,  724,  725,
      726,  727,  728,  729,  730,  731,  732,  733,  735,  736,
      737,  738,  739,  740,  741,  742,  743,  744,  745,  746,
      747,  748,  749,  750,  751,  752,  753,  754,  755,  756,
      757,  758,  759,  746,  760,  761,  750,  762,  763,  764,
      765,  766,  767,  768,  771,  772,  773,  774,  775,  776,

      778,  779,  780,  781,  782,  783,  784,  785,  786,  787,
      788,  790,  792,  793,  794,  796,  797,  798,  800,  801,
      802,  803,  804,  805,  806,  807,  808,  809,  811,  812,
      813,  814,  815,  816,  817,  818,  819,  820,  821,  822,
      823,  824,  825,  826,  819,  827,  828,  829,  817,  830,
      831,  832,  833,  834,  835,  836,  838,  839,  840,  841,
      842,  843,  844,  845,  846,  847,  848,  849,  850,  851,
      852,  854,  855,  856,  857,  858,  859,  860,  861,  862,
      864,  865,  866,  867,  868,  869,  870,  871,  872,  873,
      874,  875,  876,  877,  878,  879,  880,  881,  883,  884,

      886,  887,  888,  889,  890,  891,  893,  894,  895,  896,
      897,  898,  899,  901,  905,  907,  908,  909,  911,  912,
      914,  916,  917,  918,  919,  920,  921,  924,  925,  926,
      927,  928,  929,  930,  932,  933,  934,  935,  936,  937,
      938,  939,  940,  941,  942,  943,  944,  945,  946,  947,
      948,  949,  950,  951,  952,  953,  954,  955,  958,  959,
      963,  967,  968,  969,  970,  971,  972,  973,  974,  975,
      976,  977,  978,  979,  980,  982,  983,  984,  986,  987,
      988,  989,  990,  991,  992,  993,  994,  995,  996,  997,
      999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,

     1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
     1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
     1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040,
     1041, 1042, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
     1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
     1064, 1065, 1067, 1068, 1069, 1071, 1072, 1074, 1075, 1076,
     1077, 1078, 1079, 1080, 1081, 1084, 1086, 1087, 1088, 1089,
     1075, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
     1100, 1101, 1102, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
     1109, 1111, 1112, 1113, 1114, 1115, 1116, 1115, 1117, 1119,

     1121, 1122, 1111, 1123, 1111, 1124, 1123, 1125, 1126, 1127,
     1126, 1128, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137,
     1138, 1139, 1140, 1141, 1123, 1142, 1143, 1144, 1145, 1146,
     1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
     1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
     1167, 1168, 1169, 1170, 1172, 1173, 1174, 1176, 1177, 1178,
     1179, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
     1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
     1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
     1210, 1211, 1212, 1215, 1216, 1218, 1219, 1221, 1222, 1223,

     1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233,
     1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243,
     1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254,
     1255, 1256, 1258, 1259, 1260, 1261, 1263, 1264, 1267, 1268,
     1269, 1270, 1271, 1272, 1273, 1274, 1277, 1279, 1280, 1281,
     1283, 1284, 1287, 1289, 1290, 1293, 1298, 1299, 1300, 1301,
     1302, 1305, 1305, 1305, 1305, 1306, 1306, 1306, 1306, 1307,
     1307, 1307, 1307, 1308, 1308, 1308, 1308, 1309, 1310, 1314,
      672, 1310, 1311,  670, 1311, 1311, 1312,  669,  667, 1312,
     1313,  666, 1313, 1313,  665,  663,  661,  660,  659,  657,

      656,  655,  654,  652,  651,  650,  649,  646,  645,  642,
      641,  640,  639,  638,  636,  635,  634,  633,  632,  631,
      630,  629,  628,  627,  626,  625,  624,  623,  622,  621,
      619,  618,  617,  615,  614,  613,  610,  609,  608,  607,
      606,  603,  601,  600,  599,  598,  597,  596,  595,  594,
      593,  592,  591,  590,  589,  588,  587,  586,  585,  584,
      583,  582,  580,  579,  578,  577,  576,  575,  574,  573,
      572,  571,  570,  569,  568,  567,  566,  565,  564,  563,
      562,  561,  560,  559,  558,  556,  555,  554,  552,  551,
      550,  549,  547,  544,  543,  542,  540,  539,  538,  537,

      536,  535,  534,  533,  532,  531,  530,  529,  528,  527,
      526,  525,  524,  523,  522,  521,  520,  519,  518,  517,
      516,  515,  514,  513,  512,  511,  510,  509,  508,  507,
      506,  504,  503,  502,  501,  500,  498,  497,  494,  493,
      492,  491,  490,  489,  488,  487,  486,  485,  484,  483,
      482,  481,  480,  479,  475,  474,  473,  472,  471,  470,
      469,  467,  465,  464,  463,  462,  461,  460,  459,  458,
      457,  456,  454,  453,  452,  451,  450,  449,  448,  447,
      446,  445,  444,  443,  442,  441,  440,  439,  438,  437,
      434,  433,  432,  431,  430,  429,  428,  427,  426,  425,

      424,  423,  422,  421,  419,  417,  414,  413,  412,  411,
      410,  409,  408,  407,  405,  403,  401,  399,  397,  396,
      394,  393,  392,  391,  390,  389,  387,  386,  385,  384,
      383,  382,  381,  380,  378,  377,  376,  374,  373,  372,
      371,  370,  369,  368,  367,  366,  365,  364,  363,  362,
      361,  360,  359,  358,  357,  356,  355,  354,  353,  352,
      351,  350,  349,  348,  347,  346,  345,  344,  343,  342,
      341,  340,  339,  337,  335,  333,  332,  330,  329,  327,
      326,  324,  318,  317,  316,  315,  314,  313,  311,  310,
      307,  306,  305,  304,  303,  302,  301,  300,  299,  297,

      296,  294,  293,  292,  289,  288,  287,  286,  285,  284,
      283,  282,  281,  280,  279,  278,  277,  276,  275,  274,
      273,  272,  271,  270,  269,  268,  267,  266,  265,  264,
      263,  262,  261,  260,  259,  258,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  248,  247,  246,  245,  244,
      243,  242,  241,  240,  239,  238,  236,  235,  234,  231,
      230,  229,  228,  227,  226,  225,  224,  216,  215,  214,
      212,  211,  206,  205,  204,  199,  198,  197,  196,  195,
      194,  193,  192,  191,  190,  188,  187,  186,  185,  184,
      183,  182,  181,  180,  179,  178,  177,  176,  175,  174,

      173,  172,  171,  170,  169,  166,  165,  164,  163,  162,
      161,  160,  159,  158,  157,  156,  155,  154,  151,  150,
      149,  148,  147,  146,  145,  144,  143,  142,  141,  138,
      126,  121,  119,  118,  117,  116,  115,  110,  101,   96,
       95,   94,   90,   89,   86,   85,   84,   83,   81,   80,
       79,   78,   77,   76,   75,   74,   73,   72,   71,   69,
       66,   65,   64,   62,   61,   60,   58,   57,   56,   55,
       54,   52,   50,   48,   42,   40,   39,   36,   35,   32,
       30,   29,   24,   23,   22,   20,   16,   13, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,

     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.l"
#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1
#line 8 "scanner.l"

#include <util/expr.h>

#include <ansi-c/literals/convert_float_literal.h>
#include <ansi-c/literals/convert_string_literal.h>

#define PARSER jsil_parser
#define YYSTYPE unsigned

#include "jsil_parser.h"
#include "jsil_y.tab.h"
// extern int yyjsildebug;

#define loc() \
  { newstack(yyjsillval); PARSER.set_source_location(stack(yyjsillval)); }

static int make_identifier()
{
  loc();

  // this hashes the identifier
  irep_idt base_name=yytext;
  
  stack(yyjsillval).id(ID_symbol);
  stack(yyjsillval).set(ID_C_base_name, base_name);
  stack(yyjsillval).set(ID_identifier, base_name);
  return TOK_IDENTIFIER;
}

#include <util/pragma_wsign_compare.def>
#include <util/pragma_wnull_conversion.def>
#include <util/pragma_wdeprecated_register.def>

#line 1514 "jsil_lex.yy.cpp"

#line 69 "scanner.l"
void jsil_scanner_init()
{
  // yyjsildebug=1;
  YY_FLUSH_BUFFER;
  BEGIN(0);
}
#line 1523 "jsil_lex.yy.cpp"
#line 77 "scanner.l"
 /* %option debug */
#line 1526 "jsil_lex.yy.cpp"

#define INITIAL 0
#define GRAMMAR 1
#define COMMENT 2
#define STRING_LITERAL 3
#define STRING_LITERAL_COMMENT 4
#define STATEMENTS 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state ( int _new_state );
    
    static void yy_pop_state ( void );
    
    static int yy_top_state ( void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 79 "scanner.l"


#line 1759 "jsil_lex.yy.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1305 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1304 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 81 "scanner.l"
{ 
                  BEGIN(GRAMMAR);
                  yyless(0);    /* start again with this character */
                }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 87 "scanner.l"
{
                  yy_push_state(COMMENT); /* begin comment state */
                  // make the compiler happy
                  (void)yy_top_state();
                }
	YY_BREAK


case 3:
YY_RULE_SETUP
#line 95 "scanner.l"
{ yy_pop_state(); } /* end comment state, back to GRAMMAR */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 96 "scanner.l"
{ yyjsilerror("Probably nested comments"); }
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 97 "scanner.l"
{ yyjsilerror("Unterminated comment"); return TOK_SCANNER_ERROR; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 98 "scanner.l"
{ } /* ignore every char except '*' and NL (performance!) */
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 99 "scanner.l"
{ } /* all single characters within comments are ignored */
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 100 "scanner.l"
{ }
	YY_BREAK


case 8:
YY_RULE_SETUP
#line 104 "scanner.l"
{ yy_pop_state(); } /* end comment state, back to STRING_LITERAL */
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 105 "scanner.l"
{ yyjsilerror("Probably nested comments"); }
	YY_BREAK
case YY_STATE_EOF(STRING_LITERAL_COMMENT):
#line 106 "scanner.l"
{ yyjsilerror("Unterminated comment"); return TOK_SCANNER_ERROR; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 107 "scanner.l"
{ } /* ignore every char except '*' and NL (performance!) */
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 108 "scanner.l"
{ } /* all single characters within comments are ignored */
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 109 "scanner.l"
{ }
	YY_BREAK


case 13:
YY_RULE_SETUP
#line 113 "scanner.l"
{
                  PARSER.string_literal.clear();
                  PARSER.string_literal.append(yytext);
                  newstack(yyjsillval);
                  PARSER.set_source_location(stack(yyjsillval));
                  // String literals can be continued
                  yy_push_state(STRING_LITERAL);
                }
	YY_BREAK


case 14:
YY_RULE_SETUP
#line 124 "scanner.l"
{ PARSER.string_literal.append(yytext); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 125 "scanner.l"
{ } /* ignore */
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 126 "scanner.l"
{ yy_push_state(STRING_LITERAL_COMMENT); } /* C comment, ignore */
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 127 "scanner.l"
{ // anything else: back to normal
                  source_locationt l=stack(yyjsillval).source_location();
                  stack(yyjsillval)=convert_string_literal(PARSER.string_literal);
                  stack(yyjsillval).add_source_location().swap(l);
                  yy_pop_state(); // back to normal
                  yyless(0); // put back
                  return TOK_STRING;
                }
	YY_BREAK


case 18:
YY_RULE_SETUP
#line 138 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 139 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 140 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 141 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 142 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; } 
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 143 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 144 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 145 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 146 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 147 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 148 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 149 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 150 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 151 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 152 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 153 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 154 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 155 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 156 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 157 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 158 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 159 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 160 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 161 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 162 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 163 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 164 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 165 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 166 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 167 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 168 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 169 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_IDENTIFIER; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 171 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 172 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 173 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 174 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 175 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 176 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 177 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 178 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 179 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 180 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 181 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 182 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 183 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 184 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 185 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 186 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 187 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 188 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 189 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 190 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 191 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 192 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; } 
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 193 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 194 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 195 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 196 "scanner.l"
{ make_identifier(); return TOK_SPEC_IDENTIFIER; }
	YY_BREAK


case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 200 "scanner.l"
{ } /* skipped */
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 201 "scanner.l"
{ } /* skipped */
	YY_BREAK
/*** keywords ***/
case 78:
YY_RULE_SETUP
#line 205 "scanner.l"
{ loc(); return TOK_PROCEDURE; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 206 "scanner.l"
{ loc(); return TOK_RETURNS; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 207 "scanner.l"
{ loc(); return TOK_TO; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 208 "scanner.l"
{ loc(); return TOK_THROWS; }
	YY_BREAK
/*** scanner parsed tokens (these have a value!) ***/
case 82:
YY_RULE_SETUP
#line 212 "scanner.l"
{ return make_identifier(); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 214 "scanner.l"
{ loc(); BEGIN(STATEMENTS); return '{'; }
	YY_BREAK
/* This catches all one-character operators */
case 84:
YY_RULE_SETUP
#line 216 "scanner.l"
{ loc(); return yytext[0]; }
	YY_BREAK


case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 220 "scanner.l"
{ loc(); return TOK_NEWLINE; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 221 "scanner.l"
{ } /* skipped */
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 223 "scanner.l"
{ loc(); return TOK_EVAL; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 224 "scanner.l"
{ loc(); return TOK_LABEL; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 225 "scanner.l"
{ loc(); return TOK_GOTO; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 226 "scanner.l"
{ loc(); return TOK_SKIP; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 227 "scanner.l"
{ loc(); return TOK_WITH; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 228 "scanner.l"
{ loc(); return TOK_NEW; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 229 "scanner.l"
{ loc(); return TOK_HAS_FIELD; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 230 "scanner.l"
{ loc(); return TOK_DELETE; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 231 "scanner.l"
{ loc(); return TOK_PROTO_FIELD; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 232 "scanner.l"
{ loc(); return TOK_PROTO_OBJ; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 233 "scanner.l"
{ loc(); return TOK_REF; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 234 "scanner.l"
{ loc(); return TOK_FIELD; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 235 "scanner.l"
{ loc(); return TOK_BASE; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 236 "scanner.l"
{ loc(); return TOK_TYPEOF; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 237 "scanner.l"
{ loc(); return TOK_NULL; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 238 "scanner.l"
{ loc(); return TOK_UNDEFINED; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 239 "scanner.l"
{ loc(); return TOK_EMPTY; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 240 "scanner.l"
{ loc(); return TOK_TRUE; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 241 "scanner.l"
{ loc(); return TOK_FALSE; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 242 "scanner.l"
{ loc(); return TOK_PROTO; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 243 "scanner.l"
{ loc(); return TOK_FID; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 244 "scanner.l"
{ loc(); return TOK_SCOPE; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 245 "scanner.l"
{ loc(); return TOK_CONSTRUCTID; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 246 "scanner.l"
{ loc(); return TOK_PRIMVALUE; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 247 "scanner.l"
{ loc(); return TOK_TARGETFUNCTION; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 248 "scanner.l"
{ loc(); return TOK_CLASS; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 249 "scanner.l"
{ loc(); return TOK_NUM_TO_STRING; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 250 "scanner.l"
{ loc(); return TOK_STRING_TO_NUM; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 251 "scanner.l"
{ loc(); return TOK_NUM_TO_INT32; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 252 "scanner.l"
{ loc(); return TOK_NUM_TO_UINT32; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 253 "scanner.l"
{ loc(); return TOK_MEMBER_REFERENCE; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 254 "scanner.l"
{ loc(); return TOK_VARIABLE_REFERENCE; }
	YY_BREAK
/*** type classes ***/
case 119:
YY_RULE_SETUP
#line 258 "scanner.l"
{ loc(); return TOK_T_NULL; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 259 "scanner.l"
{ loc(); return TOK_T_UNDEFINED; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 260 "scanner.l"
{ loc(); return TOK_T_BOOLEAN; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 261 "scanner.l"
{ loc(); return TOK_T_STRING; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 262 "scanner.l"
{ loc(); return TOK_T_NUMBER; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 263 "scanner.l"
{ loc(); return TOK_T_BUILTIN_OBJECT; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 264 "scanner.l"
{ loc(); return TOK_T_USER_OBJECT; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 265 "scanner.l"
{ loc(); return TOK_T_OBJECT; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 266 "scanner.l"
{ loc(); return TOK_T_REFERENCE; }
	YY_BREAK
/*** multi-character operators ***/
case 128:
YY_RULE_SETUP
#line 270 "scanner.l"
{ loc(); return TOK_DEFEQ; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 271 "scanner.l"
{ loc(); return TOK_LEQ; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 272 "scanner.l"
{ loc(); return TOK_AND; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 273 "scanner.l"
{ loc(); return TOK_OR; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 274 "scanner.l"
{ loc(); return TOK_SUBTYPE_OF; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 275 "scanner.l"
{ loc(); return TOK_LEFT_SHIFT; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 276 "scanner.l"
{ loc(); return TOK_SIGNED_RIGHT_SHIFT; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 277 "scanner.l"
{ loc(); return TOK_UNSIGNED_RIGHT_SHIFT; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 278 "scanner.l"
{ loc(); return TOK_NOT; }
	YY_BREAK
/*** scanner parsed tokens (these have a value!) ***/
case 137:
YY_RULE_SETUP
#line 282 "scanner.l"
{ return make_identifier(); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 284 "scanner.l"
{
                       newstack(yyjsillval); 
                       stack(yyjsillval)=convert_float_literal(yytext);
                       PARSER.set_source_location(stack(yyjsillval));
                       return TOK_FLOATING;
                     }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 291 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 292 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 293 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 294 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 295 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 296 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; } 
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 297 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 298 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 299 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 300 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 301 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 302 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 303 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 304 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 305 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 306 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 307 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 308 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 309 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 310 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 311 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 312 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 313 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 314 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 315 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 316 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 317 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; } 
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 318 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 319 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 320 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 321 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 322 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 323 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 324 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 325 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 326 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 327 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 328 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 329 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 330 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 331 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 332 "scanner.l"
{ make_identifier(); return TOK_BUILTIN_LOC; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 334 "scanner.l"
{ loc(); BEGIN(GRAMMAR); return '}'; }
	YY_BREAK
/* This catches all one-character operators */
case 182:
YY_RULE_SETUP
#line 336 "scanner.l"
{ loc(); return yytext[0]; }
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(GRAMMAR):
case YY_STATE_EOF(STRING_LITERAL):
case YY_STATE_EOF(STATEMENTS):
#line 339 "scanner.l"
{ yyterminate(); /* done! */ }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 341 "scanner.l"
ECHO;
	YY_BREAK
#line 2797 "jsil_lex.yy.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1305 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1305 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1304);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree( (yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 341 "scanner.l"


int yywrap() { return 1; }


