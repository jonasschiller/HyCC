Terminals unused in grammar

    TOK_SCANNER_ERROR


Grammar

    0 $accept: program $end

    1 program: procedure_decls

    2 procedure_decls: procedure_decl
    3                | procedure_decls procedure_decl

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    5 proc_ident: TOK_IDENTIFIER
    6           | "eval"
    7           | TOK_BUILTIN_IDENTIFIER
    8           | TOK_SPEC_IDENTIFIER

    9 proc_ident_expr: proc_ident
   10                | TOK_STRING

   11 parameters_opt: ε
   12               | parameters

   13 parameters: TOK_IDENTIFIER
   14           | parameters ',' TOK_IDENTIFIER

   15 statements_opt: ε
   16               | statements

   17 statements: statement
   18           | statements statement

   19 statement: "<newline>"
   20          | instruction "<newline>"

   21 instruction: "label" TOK_IDENTIFIER
   22            | "goto" TOK_IDENTIFIER
   23            | "goto" '[' expression ']' TOK_IDENTIFIER ',' TOK_IDENTIFIER
   24            | "skip"
   25            | TOK_IDENTIFIER ":=" rhs
   26            | '[' expression ',' expression ']' ":=" expression

   27 rhs: expression
   28    | proc_ident_expr '(' expressions_opt ')' with_opt
   29    | "new" '(' ')'
   30    | "hasField" '(' expression ',' expression ')'
   31    | '[' expression ',' expression ']'
   32    | "delete" '(' expression ',' expression ')'
   33    | "protoField" '(' expression ',' expression ')'
   34    | "protoObj" '(' expression ',' expression ')'

   35 with_opt: ε
   36         | "with" TOK_IDENTIFIER

   37 expressions_opt: ε
   38                | expressions

   39 expressions: expression
   40            | expressions ',' expression

   41 expression: atom_expression
   42           | expression binary_op atom_expression

   43 atom_expression: literal
   44                | unary_op atom_expression
   45                | '(' expression ')'
   46                | "ref" '(' expression ',' expression ',' ref_type ')'
   47                | "field" '(' expression ')'
   48                | "base" '(' expression ')'
   49                | "typeOf" '(' expression ')'

   50 literal: TOK_IDENTIFIER
   51        | "null"
   52        | "#undefined"
   53        | "#empty"
   54        | "true"
   55        | "false"
   56        | TOK_FLOATING
   57        | TOK_STRING
   58        | TOK_BUILTIN_LOC
   59        | jsil_type
   60        | builtin_field

   61 builtin_field: "#proto"
   62              | "#fid"
   63              | "#scope"
   64              | "#constructid"
   65              | "#primvalue"
   66              | "#targetfunction"
   67              | "#class"

   68 binary_op: compare_op
   69          | arithmetic_op
   70          | boolean_op
   71          | bitwise_op

   72 compare_op: '='
   73           | '<'
   74           | "<="

   75 arithmetic_op: '+'
   76              | '-'
   77              | '*'
   78              | '/'
   79              | '%'

   80 boolean_op: "and"
   81           | "or"
   82           | "<:"
   83           | ':'

   84 bitwise_op: '&'
   85           | '|'
   86           | '^'
   87           | "<<"
   88           | ">>"
   89           | ">>>"

   90 unary_op: "not"
   91         | '-'
   92         | "num_to_string"
   93         | "string_to_num"
   94         | "num_to_int32"
   95         | "num_to_uint32"
   96         | '!'

   97 jsil_type: "#Null"
   98          | "#Undefined"
   99          | "#Boolean"
  100          | "#String"
  101          | "#Number"
  102          | "#BuiltinObject"
  103          | "#UserObject"
  104          | "#Object"
  105          | ref_type
  106          | "#Reference"

  107 ref_type: "#MemberReference"
  108         | "#VariableReference"


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 96
    '%' (37) 79
    '&' (38) 84
    '(' (40) 4 28 29 30 32 33 34 45 46 47 48 49
    ')' (41) 4 28 29 30 32 33 34 45 46 47 48 49
    '*' (42) 77
    '+' (43) 75
    ',' (44) 14 23 26 30 31 32 33 34 40 46
    '-' (45) 76 91
    '/' (47) 78
    ':' (58) 83
    '<' (60) 73
    '=' (61) 72
    '[' (91) 23 26 31
    ']' (93) 23 26 31
    '^' (94) 86
    '{' (123) 4
    '|' (124) 85
    '}' (125) 4
    error (256)
    TOK_SCANNER_ERROR (258)
    "<newline>" (259) 19 20
    "procedure" (260) 4
    "returns" (261) 4
    "to" (262) 4
    "throws" (263) 4
    "eval" (264) 6
    "label" (265) 21
    "goto" (266) 22 23
    "skip" (267) 24
    "with" (268) 36
    "new" (269) 29
    "hasField" (270) 30
    "delete" (271) 32
    "protoField" (272) 33
    "protoObj" (273) 34
    "ref" (274) 46
    "field" (275) 47
    "base" (276) 48
    "typeOf" (277) 49
    "null" (278) 51
    "#undefined" (279) 52
    "#empty" (280) 53
    "true" (281) 54
    "false" (282) 55
    "#proto" (283) 61
    "#fid" (284) 62
    "#scope" (285) 63
    "#constructid" (286) 64
    "#primvalue" (287) 65
    "#targetfunction" (288) 66
    "#class" (289) 67
    "num_to_string" (290) 92
    "string_to_num" (291) 93
    "num_to_int32" (292) 94
    "num_to_uint32" (293) 95
    "#MemberReference" (294) 107
    "#VariableReference" (295) 108
    "#Null" (296) 97
    "#Undefined" (297) 98
    "#Boolean" (298) 99
    "#String" (299) 100
    "#Number" (300) 101
    "#BuiltinObject" (301) 102
    "#UserObject" (302) 103
    "#Object" (303) 104
    "#Reference" (304) 106
    ":=" (305) 25 26
    "<=" (306) 74
    "and" (307) 80
    "or" (308) 81
    "<:" (309) 82
    "<<" (310) 87
    ">>" (311) 88
    ">>>" (312) 89
    "not" (313) 90
    TOK_IDENTIFIER (314) 4 5 13 14 21 22 23 25 36 50
    TOK_FLOATING (315) 56
    TOK_STRING (316) 10 57
    TOK_BUILTIN_LOC (317) 58
    TOK_BUILTIN_IDENTIFIER (318) 7
    TOK_SPEC_IDENTIFIER (319) 8


Nonterminals, with rules where they appear

    $accept (84)
        on left: 0
    program (85)
        on left: 1
        on right: 0
    procedure_decls (86)
        on left: 2 3
        on right: 1 3
    procedure_decl (87)
        on left: 4
        on right: 2 3
    proc_ident (88)
        on left: 5 6 7 8
        on right: 4 9
    proc_ident_expr (89)
        on left: 9 10
        on right: 28
    parameters_opt (90)
        on left: 11 12
        on right: 4
    parameters (91)
        on left: 13 14
        on right: 12 14
    statements_opt (92)
        on left: 15 16
        on right: 4
    statements (93)
        on left: 17 18
        on right: 16 18
    statement (94)
        on left: 19 20
        on right: 17 18
    instruction (95)
        on left: 21 22 23 24 25 26
        on right: 20
    rhs (96)
        on left: 27 28 29 30 31 32 33 34
        on right: 25
    with_opt (97)
        on left: 35 36
        on right: 28
    expressions_opt (98)
        on left: 37 38
        on right: 28
    expressions (99)
        on left: 39 40
        on right: 38 40
    expression (100)
        on left: 41 42
        on right: 23 26 27 30 31 32 33 34 39 40 42 45 46 47 48 49
    atom_expression (101)
        on left: 43 44 45 46 47 48 49
        on right: 41 42 44
    literal (102)
        on left: 50 51 52 53 54 55 56 57 58 59 60
        on right: 43
    builtin_field (103)
        on left: 61 62 63 64 65 66 67
        on right: 60
    binary_op (104)
        on left: 68 69 70 71
        on right: 42
    compare_op (105)
        on left: 72 73 74
        on right: 68
    arithmetic_op (106)
        on left: 75 76 77 78 79
        on right: 69
    boolean_op (107)
        on left: 80 81 82 83
        on right: 70
    bitwise_op (108)
        on left: 84 85 86 87 88 89
        on right: 71
    unary_op (109)
        on left: 90 91 92 93 94 95 96
        on right: 44
    jsil_type (110)
        on left: 97 98 99 100 101 102 103 104 105 106
        on right: 59
    ref_type (111)
        on left: 107 108
        on right: 46 105


State 0

    0 $accept: • program $end

    "procedure"  shift, and go to state 1

    program          go to state 2
    procedure_decls  go to state 3
    procedure_decl   go to state 4


State 1

    4 procedure_decl: "procedure" • proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    "eval"                  shift, and go to state 5
    TOK_IDENTIFIER          shift, and go to state 6
    TOK_BUILTIN_IDENTIFIER  shift, and go to state 7
    TOK_SPEC_IDENTIFIER     shift, and go to state 8

    proc_ident  go to state 9


State 2

    0 $accept: program • $end

    $end  shift, and go to state 10


State 3

    1 program: procedure_decls •
    3 procedure_decls: procedure_decls • procedure_decl

    "procedure"  shift, and go to state 1

    $default  reduce using rule 1 (program)

    procedure_decl  go to state 11


State 4

    2 procedure_decls: procedure_decl •

    $default  reduce using rule 2 (procedure_decls)


State 5

    6 proc_ident: "eval" •

    $default  reduce using rule 6 (proc_ident)


State 6

    5 proc_ident: TOK_IDENTIFIER •

    $default  reduce using rule 5 (proc_ident)


State 7

    7 proc_ident: TOK_BUILTIN_IDENTIFIER •

    $default  reduce using rule 7 (proc_ident)


State 8

    8 proc_ident: TOK_SPEC_IDENTIFIER •

    $default  reduce using rule 8 (proc_ident)


State 9

    4 procedure_decl: "procedure" proc_ident • '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    '('  shift, and go to state 12


State 10

    0 $accept: program $end •

    $default  accept


State 11

    3 procedure_decls: procedure_decls procedure_decl •

    $default  reduce using rule 3 (procedure_decls)


State 12

    4 procedure_decl: "procedure" proc_ident '(' • parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    TOK_IDENTIFIER  shift, and go to state 13

    $default  reduce using rule 11 (parameters_opt)

    parameters_opt  go to state 14
    parameters      go to state 15


State 13

   13 parameters: TOK_IDENTIFIER •

    $default  reduce using rule 13 (parameters)


State 14

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt • ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    ')'  shift, and go to state 16


State 15

   12 parameters_opt: parameters •
   14 parameters: parameters • ',' TOK_IDENTIFIER

    ','  shift, and go to state 17

    $default  reduce using rule 12 (parameters_opt)


State 16

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' • "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    "returns"  shift, and go to state 18


State 17

   14 parameters: parameters ',' • TOK_IDENTIFIER

    TOK_IDENTIFIER  shift, and go to state 19


State 18

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" • TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    TOK_IDENTIFIER  shift, and go to state 20


State 19

   14 parameters: parameters ',' TOK_IDENTIFIER •

    $default  reduce using rule 14 (parameters)


State 20

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER • "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    "to"  shift, and go to state 21


State 21

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" • TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    TOK_IDENTIFIER  shift, and go to state 22


State 22

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER • "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    "throws"  shift, and go to state 23


State 23

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" • TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    TOK_IDENTIFIER  shift, and go to state 24


State 24

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER • "to" TOK_IDENTIFIER '{' statements_opt '}'

    "to"  shift, and go to state 25


State 25

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" • TOK_IDENTIFIER '{' statements_opt '}'

    TOK_IDENTIFIER  shift, and go to state 26


State 26

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER • '{' statements_opt '}'

    '{'  shift, and go to state 27


State 27

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' • statements_opt '}'

    "<newline>"     shift, and go to state 28
    "label"         shift, and go to state 29
    "goto"          shift, and go to state 30
    "skip"          shift, and go to state 31
    TOK_IDENTIFIER  shift, and go to state 32
    '['             shift, and go to state 33

    $default  reduce using rule 15 (statements_opt)

    statements_opt  go to state 34
    statements      go to state 35
    statement       go to state 36
    instruction     go to state 37


State 28

   19 statement: "<newline>" •

    $default  reduce using rule 19 (statement)


State 29

   21 instruction: "label" • TOK_IDENTIFIER

    TOK_IDENTIFIER  shift, and go to state 38


State 30

   22 instruction: "goto" • TOK_IDENTIFIER
   23            | "goto" • '[' expression ']' TOK_IDENTIFIER ',' TOK_IDENTIFIER

    TOK_IDENTIFIER  shift, and go to state 39
    '['             shift, and go to state 40


State 31

   24 instruction: "skip" •

    $default  reduce using rule 24 (instruction)


State 32

   25 instruction: TOK_IDENTIFIER • ":=" rhs

    ":="  shift, and go to state 41


State 33

   26 instruction: '[' • expression ',' expression ']' ":=" expression

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    expression       go to state 81
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 34

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt • '}'

    '}'  shift, and go to state 88


State 35

   16 statements_opt: statements •
   18 statements: statements • statement

    "<newline>"     shift, and go to state 28
    "label"         shift, and go to state 29
    "goto"          shift, and go to state 30
    "skip"          shift, and go to state 31
    TOK_IDENTIFIER  shift, and go to state 32
    '['             shift, and go to state 33

    $default  reduce using rule 16 (statements_opt)

    statement    go to state 89
    instruction  go to state 37


State 36

   17 statements: statement •

    $default  reduce using rule 17 (statements)


State 37

   20 statement: instruction • "<newline>"

    "<newline>"  shift, and go to state 90


State 38

   21 instruction: "label" TOK_IDENTIFIER •

    $default  reduce using rule 21 (instruction)


State 39

   22 instruction: "goto" TOK_IDENTIFIER •

    $default  reduce using rule 22 (instruction)


State 40

   23 instruction: "goto" '[' • expression ']' TOK_IDENTIFIER ',' TOK_IDENTIFIER

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    expression       go to state 91
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 41

   25 instruction: TOK_IDENTIFIER ":=" • rhs

    "eval"                  shift, and go to state 5
    "new"                   shift, and go to state 92
    "hasField"              shift, and go to state 93
    "delete"                shift, and go to state 94
    "protoField"            shift, and go to state 95
    "protoObj"              shift, and go to state 96
    "ref"                   shift, and go to state 42
    "field"                 shift, and go to state 43
    "base"                  shift, and go to state 44
    "typeOf"                shift, and go to state 45
    "null"                  shift, and go to state 46
    "#undefined"            shift, and go to state 47
    "#empty"                shift, and go to state 48
    "true"                  shift, and go to state 49
    "false"                 shift, and go to state 50
    "#proto"                shift, and go to state 51
    "#fid"                  shift, and go to state 52
    "#scope"                shift, and go to state 53
    "#constructid"          shift, and go to state 54
    "#primvalue"            shift, and go to state 55
    "#targetfunction"       shift, and go to state 56
    "#class"                shift, and go to state 57
    "num_to_string"         shift, and go to state 58
    "string_to_num"         shift, and go to state 59
    "num_to_int32"          shift, and go to state 60
    "num_to_uint32"         shift, and go to state 61
    "#MemberReference"      shift, and go to state 62
    "#VariableReference"    shift, and go to state 63
    "#Null"                 shift, and go to state 64
    "#Undefined"            shift, and go to state 65
    "#Boolean"              shift, and go to state 66
    "#String"               shift, and go to state 67
    "#Number"               shift, and go to state 68
    "#BuiltinObject"        shift, and go to state 69
    "#UserObject"           shift, and go to state 70
    "#Object"               shift, and go to state 71
    "#Reference"            shift, and go to state 72
    "not"                   shift, and go to state 73
    TOK_IDENTIFIER          shift, and go to state 97
    TOK_FLOATING            shift, and go to state 75
    TOK_STRING              shift, and go to state 98
    TOK_BUILTIN_LOC         shift, and go to state 77
    TOK_BUILTIN_IDENTIFIER  shift, and go to state 7
    TOK_SPEC_IDENTIFIER     shift, and go to state 8
    '('                     shift, and go to state 78
    '['                     shift, and go to state 99
    '-'                     shift, and go to state 79
    '!'                     shift, and go to state 80

    proc_ident       go to state 100
    proc_ident_expr  go to state 101
    rhs              go to state 102
    expression       go to state 103
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 42

   46 atom_expression: "ref" • '(' expression ',' expression ',' ref_type ')'

    '('  shift, and go to state 104


State 43

   47 atom_expression: "field" • '(' expression ')'

    '('  shift, and go to state 105


State 44

   48 atom_expression: "base" • '(' expression ')'

    '('  shift, and go to state 106


State 45

   49 atom_expression: "typeOf" • '(' expression ')'

    '('  shift, and go to state 107


State 46

   51 literal: "null" •

    $default  reduce using rule 51 (literal)


State 47

   52 literal: "#undefined" •

    $default  reduce using rule 52 (literal)


State 48

   53 literal: "#empty" •

    $default  reduce using rule 53 (literal)


State 49

   54 literal: "true" •

    $default  reduce using rule 54 (literal)


State 50

   55 literal: "false" •

    $default  reduce using rule 55 (literal)


State 51

   61 builtin_field: "#proto" •

    $default  reduce using rule 61 (builtin_field)


State 52

   62 builtin_field: "#fid" •

    $default  reduce using rule 62 (builtin_field)


State 53

   63 builtin_field: "#scope" •

    $default  reduce using rule 63 (builtin_field)


State 54

   64 builtin_field: "#constructid" •

    $default  reduce using rule 64 (builtin_field)


State 55

   65 builtin_field: "#primvalue" •

    $default  reduce using rule 65 (builtin_field)


State 56

   66 builtin_field: "#targetfunction" •

    $default  reduce using rule 66 (builtin_field)


State 57

   67 builtin_field: "#class" •

    $default  reduce using rule 67 (builtin_field)


State 58

   92 unary_op: "num_to_string" •

    $default  reduce using rule 92 (unary_op)


State 59

   93 unary_op: "string_to_num" •

    $default  reduce using rule 93 (unary_op)


State 60

   94 unary_op: "num_to_int32" •

    $default  reduce using rule 94 (unary_op)


State 61

   95 unary_op: "num_to_uint32" •

    $default  reduce using rule 95 (unary_op)


State 62

  107 ref_type: "#MemberReference" •

    $default  reduce using rule 107 (ref_type)


State 63

  108 ref_type: "#VariableReference" •

    $default  reduce using rule 108 (ref_type)


State 64

   97 jsil_type: "#Null" •

    $default  reduce using rule 97 (jsil_type)


State 65

   98 jsil_type: "#Undefined" •

    $default  reduce using rule 98 (jsil_type)


State 66

   99 jsil_type: "#Boolean" •

    $default  reduce using rule 99 (jsil_type)


State 67

  100 jsil_type: "#String" •

    $default  reduce using rule 100 (jsil_type)


State 68

  101 jsil_type: "#Number" •

    $default  reduce using rule 101 (jsil_type)


State 69

  102 jsil_type: "#BuiltinObject" •

    $default  reduce using rule 102 (jsil_type)


State 70

  103 jsil_type: "#UserObject" •

    $default  reduce using rule 103 (jsil_type)


State 71

  104 jsil_type: "#Object" •

    $default  reduce using rule 104 (jsil_type)


State 72

  106 jsil_type: "#Reference" •

    $default  reduce using rule 106 (jsil_type)


State 73

   90 unary_op: "not" •

    $default  reduce using rule 90 (unary_op)


State 74

   50 literal: TOK_IDENTIFIER •

    $default  reduce using rule 50 (literal)


State 75

   56 literal: TOK_FLOATING •

    $default  reduce using rule 56 (literal)


State 76

   57 literal: TOK_STRING •

    $default  reduce using rule 57 (literal)


State 77

   58 literal: TOK_BUILTIN_LOC •

    $default  reduce using rule 58 (literal)


State 78

   45 atom_expression: '(' • expression ')'

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    expression       go to state 108
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 79

   91 unary_op: '-' •

    $default  reduce using rule 91 (unary_op)


State 80

   96 unary_op: '!' •

    $default  reduce using rule 96 (unary_op)


State 81

   26 instruction: '[' expression • ',' expression ']' ":=" expression
   42 expression: expression • binary_op atom_expression

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    ','    shift, and go to state 116
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 82

   41 expression: atom_expression •

    $default  reduce using rule 41 (expression)


State 83

   43 atom_expression: literal •

    $default  reduce using rule 43 (atom_expression)


State 84

   60 literal: builtin_field •

    $default  reduce using rule 60 (literal)


State 85

   44 atom_expression: unary_op • atom_expression

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    atom_expression  go to state 133
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 86

   59 literal: jsil_type •

    $default  reduce using rule 59 (literal)


State 87

  105 jsil_type: ref_type •

    $default  reduce using rule 105 (jsil_type)


State 88

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}' •

    $default  reduce using rule 4 (procedure_decl)


State 89

   18 statements: statements statement •

    $default  reduce using rule 18 (statements)


State 90

   20 statement: instruction "<newline>" •

    $default  reduce using rule 20 (statement)


State 91

   23 instruction: "goto" '[' expression • ']' TOK_IDENTIFIER ',' TOK_IDENTIFIER
   42 expression: expression • binary_op atom_expression

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    ']'    shift, and go to state 134
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 92

   29 rhs: "new" • '(' ')'

    '('  shift, and go to state 135


State 93

   30 rhs: "hasField" • '(' expression ',' expression ')'

    '('  shift, and go to state 136


State 94

   32 rhs: "delete" • '(' expression ',' expression ')'

    '('  shift, and go to state 137


State 95

   33 rhs: "protoField" • '(' expression ',' expression ')'

    '('  shift, and go to state 138


State 96

   34 rhs: "protoObj" • '(' expression ',' expression ')'

    '('  shift, and go to state 139


State 97

    5 proc_ident: TOK_IDENTIFIER •
   50 literal: TOK_IDENTIFIER •

    '('       reduce using rule 5 (proc_ident)
    $default  reduce using rule 50 (literal)


State 98

   10 proc_ident_expr: TOK_STRING •
   57 literal: TOK_STRING •

    '('       reduce using rule 10 (proc_ident_expr)
    $default  reduce using rule 57 (literal)


State 99

   31 rhs: '[' • expression ',' expression ']'

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    expression       go to state 140
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 100

    9 proc_ident_expr: proc_ident •

    $default  reduce using rule 9 (proc_ident_expr)


State 101

   28 rhs: proc_ident_expr • '(' expressions_opt ')' with_opt

    '('  shift, and go to state 141


State 102

   25 instruction: TOK_IDENTIFIER ":=" rhs •

    $default  reduce using rule 25 (instruction)


State 103

   27 rhs: expression •
   42 expression: expression • binary_op atom_expression

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    $default  reduce using rule 27 (rhs)

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 104

   46 atom_expression: "ref" '(' • expression ',' expression ',' ref_type ')'

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    expression       go to state 142
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 105

   47 atom_expression: "field" '(' • expression ')'

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    expression       go to state 143
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 106

   48 atom_expression: "base" '(' • expression ')'

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    expression       go to state 144
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 107

   49 atom_expression: "typeOf" '(' • expression ')'

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    expression       go to state 145
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 108

   42 expression: expression • binary_op atom_expression
   45 atom_expression: '(' expression • ')'

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    ')'    shift, and go to state 146
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 109

   74 compare_op: "<=" •

    $default  reduce using rule 74 (compare_op)


State 110

   80 boolean_op: "and" •

    $default  reduce using rule 80 (boolean_op)


State 111

   81 boolean_op: "or" •

    $default  reduce using rule 81 (boolean_op)


State 112

   82 boolean_op: "<:" •

    $default  reduce using rule 82 (boolean_op)


State 113

   87 bitwise_op: "<<" •

    $default  reduce using rule 87 (bitwise_op)


State 114

   88 bitwise_op: ">>" •

    $default  reduce using rule 88 (bitwise_op)


State 115

   89 bitwise_op: ">>>" •

    $default  reduce using rule 89 (bitwise_op)


State 116

   26 instruction: '[' expression ',' • expression ']' ":=" expression

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    expression       go to state 147
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 117

   72 compare_op: '=' •

    $default  reduce using rule 72 (compare_op)


State 118

   73 compare_op: '<' •

    $default  reduce using rule 73 (compare_op)


State 119

   75 arithmetic_op: '+' •

    $default  reduce using rule 75 (arithmetic_op)


State 120

   76 arithmetic_op: '-' •

    $default  reduce using rule 76 (arithmetic_op)


State 121

   77 arithmetic_op: '*' •

    $default  reduce using rule 77 (arithmetic_op)


State 122

   78 arithmetic_op: '/' •

    $default  reduce using rule 78 (arithmetic_op)


State 123

   79 arithmetic_op: '%' •

    $default  reduce using rule 79 (arithmetic_op)


State 124

   83 boolean_op: ':' •

    $default  reduce using rule 83 (boolean_op)


State 125

   84 bitwise_op: '&' •

    $default  reduce using rule 84 (bitwise_op)


State 126

   85 bitwise_op: '|' •

    $default  reduce using rule 85 (bitwise_op)


State 127

   86 bitwise_op: '^' •

    $default  reduce using rule 86 (bitwise_op)


State 128

   42 expression: expression binary_op • atom_expression

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    atom_expression  go to state 148
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 129

   68 binary_op: compare_op •

    $default  reduce using rule 68 (binary_op)


State 130

   69 binary_op: arithmetic_op •

    $default  reduce using rule 69 (binary_op)


State 131

   70 binary_op: boolean_op •

    $default  reduce using rule 70 (binary_op)


State 132

   71 binary_op: bitwise_op •

    $default  reduce using rule 71 (binary_op)


State 133

   44 atom_expression: unary_op atom_expression •

    $default  reduce using rule 44 (atom_expression)


State 134

   23 instruction: "goto" '[' expression ']' • TOK_IDENTIFIER ',' TOK_IDENTIFIER

    TOK_IDENTIFIER  shift, and go to state 149


State 135

   29 rhs: "new" '(' • ')'

    ')'  shift, and go to state 150


State 136

   30 rhs: "hasField" '(' • expression ',' expression ')'

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    expression       go to state 151
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 137

   32 rhs: "delete" '(' • expression ',' expression ')'

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    expression       go to state 152
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 138

   33 rhs: "protoField" '(' • expression ',' expression ')'

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    expression       go to state 153
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 139

   34 rhs: "protoObj" '(' • expression ',' expression ')'

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    expression       go to state 154
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 140

   31 rhs: '[' expression • ',' expression ']'
   42 expression: expression • binary_op atom_expression

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    ','    shift, and go to state 155
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 141

   28 rhs: proc_ident_expr '(' • expressions_opt ')' with_opt

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    $default  reduce using rule 37 (expressions_opt)

    expressions_opt  go to state 156
    expressions      go to state 157
    expression       go to state 158
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 142

   42 expression: expression • binary_op atom_expression
   46 atom_expression: "ref" '(' expression • ',' expression ',' ref_type ')'

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    ','    shift, and go to state 159
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 143

   42 expression: expression • binary_op atom_expression
   47 atom_expression: "field" '(' expression • ')'

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    ')'    shift, and go to state 160
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 144

   42 expression: expression • binary_op atom_expression
   48 atom_expression: "base" '(' expression • ')'

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    ')'    shift, and go to state 161
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 145

   42 expression: expression • binary_op atom_expression
   49 atom_expression: "typeOf" '(' expression • ')'

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    ')'    shift, and go to state 162
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 146

   45 atom_expression: '(' expression ')' •

    $default  reduce using rule 45 (atom_expression)


State 147

   26 instruction: '[' expression ',' expression • ']' ":=" expression
   42 expression: expression • binary_op atom_expression

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    ']'    shift, and go to state 163
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 148

   42 expression: expression binary_op atom_expression •

    $default  reduce using rule 42 (expression)


State 149

   23 instruction: "goto" '[' expression ']' TOK_IDENTIFIER • ',' TOK_IDENTIFIER

    ','  shift, and go to state 164


State 150

   29 rhs: "new" '(' ')' •

    $default  reduce using rule 29 (rhs)


State 151

   30 rhs: "hasField" '(' expression • ',' expression ')'
   42 expression: expression • binary_op atom_expression

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    ','    shift, and go to state 165
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 152

   32 rhs: "delete" '(' expression • ',' expression ')'
   42 expression: expression • binary_op atom_expression

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    ','    shift, and go to state 166
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 153

   33 rhs: "protoField" '(' expression • ',' expression ')'
   42 expression: expression • binary_op atom_expression

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    ','    shift, and go to state 167
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 154

   34 rhs: "protoObj" '(' expression • ',' expression ')'
   42 expression: expression • binary_op atom_expression

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    ','    shift, and go to state 168
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 155

   31 rhs: '[' expression ',' • expression ']'

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    expression       go to state 169
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 156

   28 rhs: proc_ident_expr '(' expressions_opt • ')' with_opt

    ')'  shift, and go to state 170


State 157

   38 expressions_opt: expressions •
   40 expressions: expressions • ',' expression

    ','  shift, and go to state 171

    $default  reduce using rule 38 (expressions_opt)


State 158

   39 expressions: expression •
   42 expression: expression • binary_op atom_expression

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    $default  reduce using rule 39 (expressions)

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 159

   46 atom_expression: "ref" '(' expression ',' • expression ',' ref_type ')'

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    expression       go to state 172
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 160

   47 atom_expression: "field" '(' expression ')' •

    $default  reduce using rule 47 (atom_expression)


State 161

   48 atom_expression: "base" '(' expression ')' •

    $default  reduce using rule 48 (atom_expression)


State 162

   49 atom_expression: "typeOf" '(' expression ')' •

    $default  reduce using rule 49 (atom_expression)


State 163

   26 instruction: '[' expression ',' expression ']' • ":=" expression

    ":="  shift, and go to state 173


State 164

   23 instruction: "goto" '[' expression ']' TOK_IDENTIFIER ',' • TOK_IDENTIFIER

    TOK_IDENTIFIER  shift, and go to state 174


State 165

   30 rhs: "hasField" '(' expression ',' • expression ')'

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    expression       go to state 175
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 166

   32 rhs: "delete" '(' expression ',' • expression ')'

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    expression       go to state 176
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 167

   33 rhs: "protoField" '(' expression ',' • expression ')'

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    expression       go to state 177
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 168

   34 rhs: "protoObj" '(' expression ',' • expression ')'

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    expression       go to state 178
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 169

   31 rhs: '[' expression ',' expression • ']'
   42 expression: expression • binary_op atom_expression

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    ']'    shift, and go to state 179
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 170

   28 rhs: proc_ident_expr '(' expressions_opt ')' • with_opt

    "with"  shift, and go to state 180

    $default  reduce using rule 35 (with_opt)

    with_opt  go to state 181


State 171

   40 expressions: expressions ',' • expression

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    expression       go to state 182
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 172

   42 expression: expression • binary_op atom_expression
   46 atom_expression: "ref" '(' expression ',' expression • ',' ref_type ')'

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    ','    shift, and go to state 183
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 173

   26 instruction: '[' expression ',' expression ']' ":=" • expression

    "ref"                 shift, and go to state 42
    "field"               shift, and go to state 43
    "base"                shift, and go to state 44
    "typeOf"              shift, and go to state 45
    "null"                shift, and go to state 46
    "#undefined"          shift, and go to state 47
    "#empty"              shift, and go to state 48
    "true"                shift, and go to state 49
    "false"               shift, and go to state 50
    "#proto"              shift, and go to state 51
    "#fid"                shift, and go to state 52
    "#scope"              shift, and go to state 53
    "#constructid"        shift, and go to state 54
    "#primvalue"          shift, and go to state 55
    "#targetfunction"     shift, and go to state 56
    "#class"              shift, and go to state 57
    "num_to_string"       shift, and go to state 58
    "string_to_num"       shift, and go to state 59
    "num_to_int32"        shift, and go to state 60
    "num_to_uint32"       shift, and go to state 61
    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63
    "#Null"               shift, and go to state 64
    "#Undefined"          shift, and go to state 65
    "#Boolean"            shift, and go to state 66
    "#String"             shift, and go to state 67
    "#Number"             shift, and go to state 68
    "#BuiltinObject"      shift, and go to state 69
    "#UserObject"         shift, and go to state 70
    "#Object"             shift, and go to state 71
    "#Reference"          shift, and go to state 72
    "not"                 shift, and go to state 73
    TOK_IDENTIFIER        shift, and go to state 74
    TOK_FLOATING          shift, and go to state 75
    TOK_STRING            shift, and go to state 76
    TOK_BUILTIN_LOC       shift, and go to state 77
    '('                   shift, and go to state 78
    '-'                   shift, and go to state 79
    '!'                   shift, and go to state 80

    expression       go to state 184
    atom_expression  go to state 82
    literal          go to state 83
    builtin_field    go to state 84
    unary_op         go to state 85
    jsil_type        go to state 86
    ref_type         go to state 87


State 174

   23 instruction: "goto" '[' expression ']' TOK_IDENTIFIER ',' TOK_IDENTIFIER •

    $default  reduce using rule 23 (instruction)


State 175

   30 rhs: "hasField" '(' expression ',' expression • ')'
   42 expression: expression • binary_op atom_expression

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    ')'    shift, and go to state 185
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 176

   32 rhs: "delete" '(' expression ',' expression • ')'
   42 expression: expression • binary_op atom_expression

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    ')'    shift, and go to state 186
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 177

   33 rhs: "protoField" '(' expression ',' expression • ')'
   42 expression: expression • binary_op atom_expression

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    ')'    shift, and go to state 187
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 178

   34 rhs: "protoObj" '(' expression ',' expression • ')'
   42 expression: expression • binary_op atom_expression

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    ')'    shift, and go to state 188
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 179

   31 rhs: '[' expression ',' expression ']' •

    $default  reduce using rule 31 (rhs)


State 180

   36 with_opt: "with" • TOK_IDENTIFIER

    TOK_IDENTIFIER  shift, and go to state 189


State 181

   28 rhs: proc_ident_expr '(' expressions_opt ')' with_opt •

    $default  reduce using rule 28 (rhs)


State 182

   40 expressions: expressions ',' expression •
   42 expression: expression • binary_op atom_expression

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    $default  reduce using rule 40 (expressions)

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 183

   46 atom_expression: "ref" '(' expression ',' expression ',' • ref_type ')'

    "#MemberReference"    shift, and go to state 62
    "#VariableReference"  shift, and go to state 63

    ref_type  go to state 190


State 184

   26 instruction: '[' expression ',' expression ']' ":=" expression •
   42 expression: expression • binary_op atom_expression

    "<="   shift, and go to state 109
    "and"  shift, and go to state 110
    "or"   shift, and go to state 111
    "<:"   shift, and go to state 112
    "<<"   shift, and go to state 113
    ">>"   shift, and go to state 114
    ">>>"  shift, and go to state 115
    '='    shift, and go to state 117
    '<'    shift, and go to state 118
    '+'    shift, and go to state 119
    '-'    shift, and go to state 120
    '*'    shift, and go to state 121
    '/'    shift, and go to state 122
    '%'    shift, and go to state 123
    ':'    shift, and go to state 124
    '&'    shift, and go to state 125
    '|'    shift, and go to state 126
    '^'    shift, and go to state 127

    $default  reduce using rule 26 (instruction)

    binary_op      go to state 128
    compare_op     go to state 129
    arithmetic_op  go to state 130
    boolean_op     go to state 131
    bitwise_op     go to state 132


State 185

   30 rhs: "hasField" '(' expression ',' expression ')' •

    $default  reduce using rule 30 (rhs)


State 186

   32 rhs: "delete" '(' expression ',' expression ')' •

    $default  reduce using rule 32 (rhs)


State 187

   33 rhs: "protoField" '(' expression ',' expression ')' •

    $default  reduce using rule 33 (rhs)


State 188

   34 rhs: "protoObj" '(' expression ',' expression ')' •

    $default  reduce using rule 34 (rhs)


State 189

   36 with_opt: "with" TOK_IDENTIFIER •

    $default  reduce using rule 36 (with_opt)


State 190

   46 atom_expression: "ref" '(' expression ',' expression ',' ref_type • ')'

    ')'  shift, and go to state 191


State 191

   46 atom_expression: "ref" '(' expression ',' expression ',' ref_type ')' •

    $default  reduce using rule 46 (atom_expression)
